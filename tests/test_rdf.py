#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of exma (https://github.com/fernandezfran/exma/).
# Copyright (c) 2021, Francisco Fernandez
# License: MIT
#   Full Text: https://github.com/fernandezfran/exma/blob/master/LICENSE

# ============================================================================
# IMPORTS
# ============================================================================

import os
import pathlib

import exma.rdf

from matplotlib.testing.decorators import check_figures_equal

import numpy as np

import pytest

# ============================================================================
# CONSTANTS
# ============================================================================

TEST_DATA_PATH = pathlib.Path(
    os.path.join(os.path.abspath(os.path.dirname(__file__)), "test_data")
)

# ============================================================================
# TESTS
# ============================================================================


@pytest.mark.parametrize(
    ("fname", "box", "rdf_res"),
    [
        (
            "liquid.xyz",
            np.full(3, 8.54988),
            np.array(
                [
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    3.02911866e-04,
                    4.98463643e-02,
                    5.30536035e-01,
                    1.60520391e00,
                    2.44907379e00,
                    2.60206830e00,
                    2.32801608e00,
                    1.93588525e00,
                    1.56782444e00,
                    1.28822973e00,
                    1.07740426e00,
                    9.28767729e-01,
                    8.19051816e-01,
                    7.39598267e-01,
                    6.99828931e-01,
                    6.69324619e-01,
                    6.63333275e-01,
                    6.71415819e-01,
                    6.90160540e-01,
                    7.26032142e-01,
                    7.83985413e-01,
                    8.46518252e-01,
                    9.21835769e-01,
                    9.86963621e-01,
                    1.05339623e00,
                    1.11808103e00,
                    1.17931384e00,
                    1.20961331e00,
                    1.22644524e00,
                    1.20941302e00,
                    1.18220067e00,
                    1.14522433e00,
                    1.09090869e00,
                    1.03628384e00,
                    9.89200392e-01,
                    9.52238784e-01,
                    9.17195130e-01,
                    8.93103282e-01,
                    8.86567596e-01,
                    8.79963050e-01,
                    8.86845374e-01,
                    9.04842769e-01,
                    9.25226530e-01,
                    9.51592102e-01,
                    9.73662531e-01,
                    1.00088440e00,
                    1.02122698e00,
                    1.04242634e00,
                    1.05773401e00,
                    1.06585728e00,
                    1.06402386e00,
                    1.06510303e00,
                    1.05809282e00,
                    1.04698047e00,
                    1.03337715e00,
                    1.01596787e00,
                    1.00168569e00,
                    9.87250681e-01,
                    9.77134730e-01,
                    9.67333017e-01,
                    9.61576492e-01,
                    9.57975542e-01,
                    9.61733281e-01,
                    9.62542800e-01,
                    9.71379359e-01,
                    9.79026055e-01,
                    9.90421204e-01,
                    9.97327554e-01,
                    1.00934078e00,
                    1.01371718e00,
                    1.02072346e00,
                    1.02102994e00,
                    1.02253700e00,
                    1.02586396e00,
                    1.02147640e00,
                    1.01707181e00,
                    1.01318184e00,
                    1.00718744e00,
                    1.00078544e00,
                    9.93021388e-01,
                ]
            ),
        ),
        (
            "solid.xyz",
            np.full(3, 7.46901),
            np.array(
                [
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    4.14936243e-04,
                    6.34993759e-02,
                    8.01847239e-01,
                    3.01723328e00,
                    5.01277046e00,
                    4.82428739e00,
                    3.13503663e00,
                    1.49876398e00,
                    5.49669957e-01,
                    1.62600203e-01,
                    4.05455135e-02,
                    2.35322907e-02,
                    6.45745610e-02,
                    1.84516206e-01,
                    4.34718203e-01,
                    7.65335214e-01,
                    1.01124215e00,
                    9.86078878e-01,
                    7.16084508e-01,
                    3.91515873e-01,
                    1.75113611e-01,
                    1.56260632e-01,
                    4.29953581e-01,
                    1.12315155e00,
                    2.12397574e00,
                    2.83678925e00,
                    2.71865655e00,
                    1.88933039e00,
                    9.92118750e-01,
                    4.49321601e-01,
                    3.63164631e-01,
                    6.18845000e-01,
                    9.45650069e-01,
                    1.08011449e00,
                    9.15823657e-01,
                    6.30590269e-01,
                    4.96516669e-01,
                    6.74685936e-01,
                    1.10663783e00,
                    1.51575588e00,
                    1.60636583e00,
                    1.28740524e00,
                    8.12412101e-01,
                    4.93543233e-01,
                    4.20702788e-01,
                    4.71396206e-01,
                    5.02122588e-01,
                    5.18806476e-01,
                    6.91349896e-01,
                    1.19860053e00,
                    1.90145957e00,
                    2.35009388e00,
                    2.19416378e00,
                    1.56447686e00,
                    9.07837673e-01,
                    5.08830242e-01,
                    3.64095073e-01,
                    3.60826957e-01,
                    4.74226301e-01,
                    7.44384014e-01,
                    1.11438196e00,
                    1.36686048e00,
                    1.35473129e00,
                    1.14714759e00,
                    9.74078973e-01,
                    9.33320296e-01,
                    9.17361913e-01,
                    8.53337362e-01,
                    7.95277677e-01,
                    8.15540955e-01,
                    8.57573220e-01,
                    8.38587282e-01,
                    7.79573846e-01,
                    7.91390135e-01,
                    8.79243807e-01,
                    1.03200774e00,
                    1.29641001e00,
                ]
            ),
        ),
    ],
)
def test_RadialDistributionFunction_calculate(fname, box, rdf_res):
    """Test the RDF calculation in LJ liquid and solid."""
    nbin = 100
    rmax = np.min(box) / 2
    result = exma.rdf.RadialDistributionFunction(
        str(TEST_DATA_PATH / fname), "Ar", "Ar", start=1, nbin=nbin, rmax=rmax
    ).calculate(box)

    dr = rmax / nbin
    np.testing.assert_array_almost_equal(
        result["r"], np.arange(dr / 2, rmax + dr / 2, dr)
    )
    np.testing.assert_array_almost_equal(result["rdf"], rdf_res)


@pytest.mark.parametrize(
    "fname",
    ["liquid.out", "solid.xtc", "gas.lammsptrj", "dump.asd.123.lammptsrj"],
)
def test_RadialDistributionFunction_raises(fname):
    """Test the RDF ValueError raise."""
    with pytest.raises(ValueError):
        exma.rdf.RadialDistributionFunction(fname, "H", "H").calculate()


@pytest.mark.parametrize(
    ("fname", "box"),
    [("liquid.xyz", np.full(3, 8.54988)), ("solid.xyz", np.full(3, 7.46901))],
)
def test_RadialDistributionFunction_warning(fname, box):
    """Test the RDF EOF warning."""
    with pytest.warns(UserWarning):
        exma.rdf.RadialDistributionFunction(
            str(TEST_DATA_PATH / fname),
            "Ar",
            "Ar",
            start=190,
            stop=210,
            step=5,
        ).calculate(box)


@check_figures_equal(extensions=["pdf", "png"])
def test_RadialDistributionFunction_plot(fig_test, fig_ref):
    """Test the RDF plot."""
    files = ["liquid.xyz", "solid.xyz"]
    boxes = [np.full(3, 8.54988), np.full(3, 7.46901)]
    rdfs = []
    for fname, box in zip(files, boxes):
        rdf = exma.rdf.RadialDistributionFunction(
            str(TEST_DATA_PATH / fname),
            "Ar",
            "Ar",
            start=10,
            stop=20,
            rmax=np.min(box) / 2,
        )
        rdf.calculate(box)
        rdfs.append(rdf)

    # test
    test_ax = fig_test.subplots()
    for rdf in rdfs:
        rdf.plot(ax=test_ax)

    # expected
    exp_ax = fig_ref.subplots()

    exp_ax.set_xlabel("r")
    exp_ax.set_ylabel("g(r)")
    for rdf in rdfs:
        exp_ax.plot(rdf.df_rdf_["r"], rdf.df_rdf_["rdf"])


def test_RadialDistributionFunction_save():
    """Test the RDF save."""
    file = "solid.xyz"
    box = np.full(3, 7.46901)

    rdf = exma.rdf.RadialDistributionFunction(
        str(TEST_DATA_PATH / file),
        "Ar",
        "Ar",
        stop=5,
        rmax=np.min(box) / 2,
    )
    rdf.calculate(box)
    rdf.save()

    with open("rdf.dat", "r") as fin:
        readed = fin.read()
    os.remove("rdf.dat")

    assert readed == (
        "# r, rdf\n"
        "1.867252e-02  0.000000e+00\n"
        "5.601758e-02  0.000000e+00\n"
        "9.336263e-02  0.000000e+00\n"
        "1.307077e-01  0.000000e+00\n"
        "1.680527e-01  0.000000e+00\n"
        "2.053978e-01  0.000000e+00\n"
        "2.427428e-01  0.000000e+00\n"
        "2.800879e-01  0.000000e+00\n"
        "3.174329e-01  0.000000e+00\n"
        "3.547780e-01  0.000000e+00\n"
        "3.921230e-01  0.000000e+00\n"
        "4.294681e-01  0.000000e+00\n"
        "4.668131e-01  0.000000e+00\n"
        "5.041582e-01  0.000000e+00\n"
        "5.415032e-01  0.000000e+00\n"
        "5.788483e-01  0.000000e+00\n"
        "6.161933e-01  0.000000e+00\n"
        "6.535384e-01  0.000000e+00\n"
        "6.908834e-01  0.000000e+00\n"
        "7.282285e-01  0.000000e+00\n"
        "7.655735e-01  0.000000e+00\n"
        "8.029186e-01  0.000000e+00\n"
        "8.402636e-01  0.000000e+00\n"
        "8.776087e-01  0.000000e+00\n"
        "9.149537e-01  6.108156e-02\n"
        "9.522988e-01  6.092755e-01\n"
        "9.896438e-01  2.330627e+00\n"
        "1.026989e+00  4.068531e+00\n"
        "1.064334e+00  7.717807e+00\n"
        "1.101679e+00  2.509223e+00\n"
        "1.139024e+00  1.179172e+00\n"
        "1.176369e+00  4.013463e-01\n"
        "1.213714e+00  1.311409e-01\n"
        "1.251059e+00  3.993291e-02\n"
        "1.288404e+00  1.454723e-02\n"
        "1.325749e+00  4.768334e-02\n"
        "1.363094e+00  1.406711e-01\n"
        "1.400439e+00  3.331729e-01\n"
        "1.437784e+00  6.239361e-01\n"
        "1.475129e+00  1.622218e+00\n"
        "1.512475e+00  9.674654e-01\n"
        "1.549820e+00  5.908107e-01\n"
        "1.587165e+00  2.954837e-01\n"
        "1.624510e+00  1.351065e-01\n"
        "1.661855e+00  1.296171e-01\n"
        "1.699200e+00  3.197961e-01\n"
        "1.736545e+00  8.940744e-01\n"
        "1.773890e+00  1.687019e+00\n"
        "1.811235e+00  4.893050e+00\n"
        "1.848580e+00  2.206925e+00\n"
        "1.885925e+00  1.524892e+00\n"
        "1.923270e+00  7.722965e-01\n"
        "1.960615e+00  3.351781e-01\n"
        "1.997960e+00  2.779271e-01\n"
        "2.035305e+00  5.058094e-01\n"
        "2.072650e+00  7.754347e-01\n"
        "2.109995e+00  1.822872e+00\n"
        "2.147340e+00  7.439960e-01\n"
        "2.184685e+00  4.881144e-01\n"
        "2.222030e+00  3.737361e-01\n"
        "2.259376e+00  5.337379e-01\n"
        "2.296721e+00  8.658074e-01\n"
        "2.334066e+00  1.242753e+00\n"
        "2.371411e+00  2.815799e+00\n"
        "2.408756e+00  1.066987e+00\n"
        "2.446101e+00  6.357987e-01\n"
        "2.483446e+00  3.777396e-01\n"
        "2.520791e+00  3.252727e-01\n"
        "2.558136e+00  3.824874e-01\n"
        "2.595481e+00  8.184019e-01\n"
        "2.632826e+00  4.026958e-01\n"
        "2.670171e+00  5.359610e-01\n"
        "2.707516e+00  9.512841e-01\n"
        "2.744861e+00  1.548533e+00\n"
        "2.782206e+00  4.138170e+00\n"
        "2.819551e+00  1.742762e+00\n"
        "2.856896e+00  1.245667e+00\n"
        "2.894241e+00  7.075139e-01\n"
        "2.931586e+00  3.976954e-01\n"
        "2.968931e+00  4.351349e-01\n"
        "3.006277e+00  3.813235e-01\n"
        "3.043622e+00  3.796908e-01\n"
        "3.080967e+00  5.781115e-01\n"
        "3.118312e+00  9.186170e-01\n"
        "3.155657e+00  2.383593e+00\n"
        "3.193002e+00  1.082918e+00\n"
        "3.230347e+00  9.061005e-01\n"
        "3.267692e+00  7.749527e-01\n"
        "3.305037e+00  7.484353e-01\n"
        "3.342382e+00  1.510276e+00\n"
        "3.379727e+00  6.816451e-01\n"
        "3.417072e+00  6.255840e-01\n"
        "3.454417e+00  6.553446e-01\n"
        "3.491762e+00  1.385684e+00\n"
        "3.529107e+00  6.715838e-01\n"
        "3.566452e+00  6.138131e-01\n"
        "3.603797e+00  6.376908e-01\n"
        "3.641142e+00  1.349646e+00\n"
        "3.678487e+00  8.076434e-01\n"
        "3.715832e+00  1.026479e+00\n"
    )
